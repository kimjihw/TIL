2023-05-23

1) first, last, lastOrNull, firstOrNull 

first = 첫번째 인자 리턴 -> 배열일 경우 [0] 출력, 문자열일 경우 첫번째 문자 출력
last = 마지막 인자 리턴 -> 배열일 경우 배열의 마지막 인자, 문자열일 경우 마지막 문자 출력
firstOrNull = 첫번째 인자가 있으면 출력 없을 시 null 출력 
lastOrNull = 마지막 인자가 있으면 출력 없을 시 null 출력 
     
2) Any

Any는 코틀린의 모든 클래스의 부모 클래스 또는 상위 클래스    

다만 Any도 null 값은 저장할 수 없음

                [Any?]
                   |
        +---------------+
        |                    |
     [Any]     [모든 Nullable]
        |
[모든 Non-null]

Any와 Any?의 차이는 null값을 저장할 수 있는지 없는지의 차이

Any와 제테릭 타입의 차이는 제네릭타입은 Nullable Type을 대입할 수 있음

class Processor<T : Any> {  //null이 될 수 없는 타입 범주를 지정합니다.
    fun process(value: T) {
        value.hashCode()  //T 타입의 "value"는 "null"이 될 수 없습니다.
    }
}
그래서 null 제약이 필요하다면 위와 같이하면 됨

3) 형 변환

위와 같이 Any를 사용해서 형 변환이 가능

fun main() {
    smartCast(8)
    smartCast("kotlin")
}

fun smartCast(any : Any?){
    when(any){
        is String ->{
            println("$any is String")
        }
        is Int ->{
            println("$any is Int")
        }
        else ->{
            println("umm...")
        }
    }
}

또한 나는 지금까지 형 변환을 시킬 때 as Int 이런 식으로 as 연산자를 사용했는데
as 연산자는 안전하지 않은 형 변환방법이라고 한다.

만약 as연산자를 사용해야한다면 아래와 같은 방법으로 사용하면 된다.
* 값을 저장하고자 ?를 사용해 널 가능 변수를 선언
* as 연산자로 ?를 사용해 안전한 호출을 추가

4) 페어와 트리플

둘 다 서로 밀접하게 연결된 서로 다른 값을 저장할 수 있다.

4.1) 선언 방법

val mobile = Pair("Google", 500)
val screenMirror = Pair("Chrome cast", 20.5)
val addressBook = Triple("Khan", 123456789, "Stockholm")

코틀린 유형 추론이 자동으로 변수 유형을 찾아내기 때문에 명시적으로 데이터 유형을 선언 할 필요가 없음

4.2) 값을 가져오는 방법

페어
val (name, price) = mobile
println("Mobile=$name, Price=$price") 
이런 식으로 가능

혹은

mobile.first, mobile.second 로도 가능

트리플

val (name, phone, address) = addressBook

혹은

addressBook.first, addressBook.second, addressBook.third 로도 가능

component1, component2, component3 이런식으로도 페어와 트리플의 값을 가져올 수 있다고 한다.

5) 레이블을 가진 for문과 break문

이중 for문일 경우 내부 for문에 break가 있다면 내부만 종료가 되고 외부 for문이 실행이 되는데

outLoop@ for(i in 1..3){
    for(j in 1..3){
        if(i==2 and j==2){
            break@outLoop
        }
    }
}

이런식으로 레이블을 주면 내부에서도 외부 for문을 중지시킬 수 있다.