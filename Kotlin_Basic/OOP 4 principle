[2023-05-31]

객체지향 프로그래밍의 4가지 요소

애자일 기법 -> 코드를 간결하고 무결하게 만드는 것

waterfall 방법론  

- 소프트웨어 개발 단계가 위에서부터 아래로 폭포에서 물이 떨어지듯 순차적으로 진행
- 한단계씩 진행함에 따라 다시 이전 단계로 가지 않고 계속 진행하기에 다음 단계로 가기전에 완벽하게 요구사항을 반영하여 개발했다는 것을 전제로 함

요구사항 분석 -> 설계 -> 구현 -> 테스트 -> 유지보수

장점

수직적으로 진행되기에 각 과정에 대한 이해가 용이

단점

수직적으로 진행되기 때문에 개발 도중에 요구사항이 변경되었을 경우 추가적인 비용과 시간이 들게 됨 -> 수정사항을 반영하여 처음부터 진행하게 됨

애자일 방법론

- 소프트웨어 개발 단계를 명확하게 구분하지않고 각 단계를 반복적으로 수행하면서 진행
- 잦은 요구사항의 변경이나 큰 프로젝트를 맡게 되어 요구사항 분석 및 설계를 완벽하게 하기 어려운 경우 폭포수 방법론보다 적합함

1. 캡슐화

캡슐화  

- 프로퍼티와 행위들이 한곳에서 결합
- 데이터와 함수를 하나의 단위로 묶는 것을 포함하는 객체지향 프로그래밍 기법으로 클래스라고 함
- 외부로부터 보호하는 데도 유용

- 모든 프로퍼티와 함수는 하나의 컨터이너에 배치
- 모든 프로퍼티는 비공개로 선언
- 프로퍼티는 제한되어 있으며 직접 접근 불가능

[2023-06-18]

1. 상속

- 코드 반복을 피하는데 유용
- 코틀린에서 클래스를 상속하고자 부모 클래스를 open class로 생성
- 부생성자를 이용하여 확장할 수도 있음

2. 추상화

2.1 추상 클래스

- 일반적인 개념이고 구체적인 것에 속하지 않음
- 인스턴스를 만들지 않음
- 일반 함수와 추상 함수 둘 다 가질 수 있음
- 부모 클래스를 상속하는 모든 클래스가 이 추상 함수를 구현해야함 한다는 것이 장점 -> 부모 클래스에서 추상 함수를 선언함으로써 자식 클래스가 그들 자신을 구현하여 사용할 수 있게 함 -> 프로그램의 표준화 정도를 높임

핵심 사항

- 추상 클래스는 일반 클래스와 같다. 여기에는 프로퍼티, 함수, 생성자가 포함, 그러나 추상 클래스는 인스턴스화 불가능
- 추상 클래스만 추상 함수를 가질 수 있음
- 추상 함수는 함수 본문없이 선언
- 추상 함수는 비공개로 선언 불가능

3. 인터페이스

3.1 인터페이스와 추상 클래스 

- 추상 클래스는 클래스 내 '추상 메서드'가 하나 이상 포함되거나 abstract로 정의된 경우를 말함, 반면 인터페이스는 모든 메서드가 추상 메서드
- 추상 클래스는 추상 클래스를 상속받아서 기능을 이용하고 확장시키는데 있는 반면 인터페이스는 함수의 껍데기만 있는데 그 이유는 그 함수의 구현을 강제하기 위함 -> 한 개의 클래스만 상속이 가능하기에 해당 클래스의 구분을 추상 클래스 상속을 통해서 해결, 할 수 있는 공통된 기능들을 인터페이스의 다중 상속을 통해 구현

3.2 다중 인터페이스

- 코틀린은 다중 상속을 허용하지 않지만 둘 이상의 인터페이스가 있는 클래스는 허용

3.3 인터페이스 간 충돌 해결

- super 키워드와 다이아몬드 연산자를 사용함으로써 해결 가능
ex) super<IDriveable>.startEngine()

4. 오버라이딩

- 하위 클래스에서 상속된 함수를 재정의 하는 것
- 함수 오버라이딩의 목적은 제공된 구현이 충분하지 않기 때문에 파생 클래스가 자체 구현을 제공하게 되는 것
- 부모 클래스의 함수를 open으로 선언해야 함
- 하위 클래스의 함수는 override 키워드를 사용해야 함
- 자식 클래스가 함수를 오버라이딩하는 것을 제한하려면 부모 클래스의 함수를 final로 선언

4.1 프로퍼티 오버라이딩

- 불변 프로퍼티는 불변 프로퍼티로 오버라이딩 가능
- 불변 프로퍼티는 가변 프로퍼티로 오버라이딩 가능
- 가변 프로퍼티는 가변 프로퍼티로 오버라이딩 가능

- 부모클래스의 주 생성자가 val로 되어 있어도 해당 클래스를 상속받는 자식 클래스가 var로 받으면 가능

[2023-06-20]
4.2 상속의 종류

- 단일 상속 : 하나의 상위 클래스만 갖음
- 다중 상속 : 클래스가 이미 다른 클래스에서 파생된 클래스에서 파생된 클래스에서 파생된 경우 -> 한 클래스가 두 개 이상의 부모 클래스를 갖고 있는 상황
- 계층 상속 : 상위 클래스가 여러 하위 클래스에 상속되는 상황
- 계층 다중 상속 : 상위 클래스가 두 개 이상의 클래스에서 파생되고 하위 클래스 중 하나가 다른 클래스에서 파생되는 것

4.3 is-a 관계

ex) 학생은 사람이다, 원은 도형이다, 독일 셰퍼드는 개다

5. 다형성

- 객체의 종류에 따라 함수가 다르게 동작하는 개념

