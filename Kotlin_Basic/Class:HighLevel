[2023-06-27]

1. Sealed Class, Enum Class

- 클래스의 주목적은 다른 클래스가 서로를 확장하고 코드 재사용성과 유지 보수성을 최대한 활용하는 것

1.1 Sealed Class 
- 상속의 제한을 둠 
- 예전에는 클래스 내부에서 자식 클래스를 선언해야 하였는데 지금은 같은 파일 안에서만 선언되면 된다.

ex) 같은 클래스 안에 있을 경우 불러올 때 A.B() 이렇게 불러오는데 외부에 있을 경우 var d = D() 이런 식으로 불러오면 된다.

when 절을 할 경우 일반적으로 else 블록을 붙여야 하지만 Sealed Class 는 사용하지 않는다.

1.2 Enum Class

- 위의 클래스와 비슷하지만 모든 값이 같은 유형이라는 점만 다름
- 몇 개의 색상이나 요일과 같은 결과가 작은 집합을 나타낼 때 유용

ex) enum class Color {
    RED,
    GREEN,
    BROWN,
    YELLOW
}

이런식으로 되어 있다면 Color.RED, Color.RED.name 으로 불러오면 값을 가져오고 Color.RED.ordinal 으로 불러오면 인덱스 값을 가져온다

- 각 멤버는 0부터 시작하는 정수 값을 포함하지만 생성자를 사용하여 선택한 값을 할당할 수 있다.

ex) enum class Week(val value : Int){
    MONDAY(2), TUESDAY(5)
}

- 코틀린에서는 세미콜론을 사용하지 않지만 열거형 클래스에 하나 이상의 프로퍼티와 생성자가 포함되어 있으면 세미콜론을 사용해야 함

- 열거형 클래스는 인터페이스도 구현 가능 -> 열거형 클래스의 각 멤버는 인터페이스에 언급된 각 함수 서명의 함수 본문을 제공해야 함

- 값을 알고 싶으면 Week.valueOf(변수)를 하면 됨