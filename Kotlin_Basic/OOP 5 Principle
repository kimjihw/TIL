[2023-07-10]

객체지향 5원칙 (SOLID 원칙)

1. 단일 책임 원칙

- 모든 클래스는 각각 하나의 책임만 가져야 한다. 클래스는 그 책임을 완전히 캡슐화해야함을 의미

ex) 사칙연산 함수를 가지고있는 계산 클래스가 있다고 치면 이 상태의 계산 클래스는 오직 사친연산 기능만을 책임, 이 클래스를 수정한다고 하면 그 이유는 사칙연산 함수와 관련된 문제일 뿐

2. 의존성 역전 원칙

- 객체는 저수준 모듈보다 고수준 모듈에 의존해야함 -> 저수준 모듈 : 구현된 객체, 고수준 모듈: 인터페이스와 같은 객체의 형태나 추상적 개념
- 코드의 확장성 및 재사용성을 추구하기 위한 원칙
- 기존의 코드를 변경하지 않으면서 (closed) 기능을 추가할 수 있도록 (open) 
ex) 캐릭터를 하나 생성한다고 할 때, 각각의 캐릭터가 움직임이 다를 경우 움직임의 패턴 구현을 하위 클래스에 맡긴다면 캐릭터 클래스의 수정은 필요없고 (closed) 움직임의 패턴만 정의하면 됨(open)

3. 리스코프 치환 원칙

- 자식 클래스는 언제나 자신의 부모 클래스를 대체할 수 있다는 원칙. 즉, 부모 클래스가 들어갈 자리에 자식 클래스를 넣어도 계획대로 잘 작동해야함
- 자식클래스는 부모 클래스의 책임을 무시하거나 재정의하지 않고 확장만 수행하도록 해야 LSP(리스코프 치환 원칙)을 만족

4. 인터페이스 분리 원칙

- 한 클래스는 자신이 사용하지않는 인터페이스는 구현하지 말아야 함. 하나의 일반적인 인터페이스보다 여러개의 구체적인 인터페이스가 나음

5. 의존 역전 원칙

- 의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 것. 한마디로 구체적인 클래스보다 인터페이스나 추상 클래스와 관계를 맺으라는 것