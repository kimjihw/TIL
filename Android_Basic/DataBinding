1. JetPack

Android JetPack은 개발자가 고품질 앱을 쉽게 개발할 수 있도록 지원하는 라이브러리, 도구, 가이드의 모음
androidx.* 패키지 라이브러리로 지원되며 크게 4가지 구성요소(기초, 아키텍처, 동작, UI)를 가짐

[2023-06-07]

1. DataBinding

- Variable 참조 -> View(xml)에서 코틀린 코드의 데이터를 직접 참조 가능
- 2-way data binding -> View 에서 변경된 데이터를 코틀린 코드가 참조할 수 있도록 설정 가능
- Listener 바인딩 -> 버튼 Click 과 같은 event를 처리할 리스너를 View에서 지정 가능
- 표현식 삽입 -> 함수 호출이나 3항 연산자 같은 간단한 코드를 View에 넣을 수 있음

ex )  app:srcCompat="@{user.likes &lt; 4 ? R.drawable.ic_person_black_96dp : R.drawable.ic_whatshot_black_96dp }"

2. Observer 패턴

객체의 상태 변화를 관찰하는 관찰자들, 즉 옵저버들의 목록을 객체에 등록해서 상태변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 알리도록 하는 디자인 패턴

이 패턴의 핵심은 옵저버 또는 리스너라 불리는 하나 이상의 객체를 관찰 대상이 되는 객체에 등록 -> 각각의 옵저버들은 관찰 대상인 객체가 발생시키는 이벤트를 받아 처리하고 이벤트 발생 시 각 옵저버는 콜백을 받음

3. LiveData

- 식별 가능한(Observable) 데이터 홀더 클래스
- 일반 식별 가능한 클래스와 달리 생명 주기 인식, 즉 액티비티, 프래그먼트, 서비스 등 다른 앱 구성요소의 생명 주기를 고려
- 아키텍쳐 패턴의 일부로 원시타입과 컬렉션 타입을 포함하는 데이터 홀더
- 뷰의 변경 사항을 관찰하고 Active 일 경우에만 뷰를 업데이트
- 뷰모델만 사용하면 데이터가 뷰를 변경할 때마다 여러 번 호출되므로 비용이 많이 듦
- Observer 패턴을 기반으로하며 ViewModel과 View 간의 통신을 쉽게 함
- 여러 위치에서 데이터 참조를 추가 및 삭제하는 여러 호출을 수행하는 대신 데이터 변경을 관찰하고 데이터를 자동으로 업데이트
- 데이터를 저장하고 변화를 관찰할 수 있는 객체
- 생명주기가 Start 혹은 Resume일 때 활성 상태로 간주, Destory일 경우 옵저버가 삭제되도록 할 수 있기에 메모리 누수에 대한 우려 없음

- postValue는 백그라운드에서 값을 변경 또한 가장 최신의 값이 적용 -> 즉각적으로 값을 변경해야 한다면 setValue 사용

3.1 RxJava

- 데이터를 관찰할 수 있고 데이터를 스트림으로 처리
- 동시성 문제, 다중 이벤트 처리, 백그라운드 처리 등의 문제를 좀 더 쉽게 해결

RX = Observable + Observers + Scheduler로 구성

RXJava와 LiveData는 생명 주기를 제외하고는 비슷

3.2 MutableLiveData

- LiveData를 확장하고 setValue, postValue 같은 메서드를 제공
- LiveData는 뷰모델 클래스 안에서만 수정 가능
- setValue 및 postValue를 사용 할 수 있으므로 기본 쓰레드, 백그라운드 쓰레드에서 값 변경 가능
- 저장된 데이터를 업데이트하려면 MutableLiveData를 사용

LiveData는 뭔가를 표시할 때 사용, MutableLiveData는 뭔가를 설정/변경할 때 사용
