1. Flow 와 LiveData

1.1 Flow

- 단일 값만 반환하는 suspend function과 달리 여러 값을 순차적으로 내보낼 수 있는 유형
- 비동기식으로 계산 할 수 있는 데이터 스트림의 개념

1.1.1 데이터 스트림

- 생산자 : 스트림에 추가되는 데이터 생산, 코루틴 덕분에 flow에서 비동기적으로 데이터가 생산될 수 있음
- (선택사항) 중개자: 스트림에 내보내는 값이나 스트림 자체를 수정 가능
- 소비자 : 스트림의 값을 사용

1.1.2 LiveData

- 생명 주기 인식
- 활성 관찰자에게만 업데이트 정보를 알림
- UI와 데이터 상태 일치 보장: 기본 데이터가 바뀔 때 Observer객체에 알림
- 메모리 누수 없음: LifeCycle 객체에 결합돼 있으며 연결된 생명주기가 끝나면 자동 삭제
- 중지된 액티비티로 인한 비정상 종료 없음: 액티비티가 백스택에 있을 때를 비롯해 관찰자의 생명주기가 비활성 상태에 있으면 관찰자는 어떤 LiveData 이벤트도 받지 않음
- 생명주기를 수동으로 처리하지 않음: LiveData는 관찰하는 동안 관련 생명주기 상태 변경을 인식하므로 모든 것을 자동으로 관리
- 최신 데이터 유지: 생명주기가 비활성화되면 다시 활성화될 때 최신 데이터를 수신


1.1.3 정리

- Flow는 여러 값을 내보내는 데이터 스트림이며 코루틴 기반으로 빌드
- LiveData는 안드로이드 생명주기를 인식하는 데이터 홀더 클래스 -> 액티비티, 프래그먼트에서 사용하기 좋음
- 앱의 다른 레이어에서 데이터 스트림을 써야 한다면 Flow를 사용한 후에 asLiveData()를 사용하여 ViewModel의 LiveData로 변환하는 것이 좋음

2. 클린 아키텍처

- 권장 앱 아키텍처는 UI Layer -> Domain Layer -> Data Layer 인데 도메인은 결합도를 낮추고 관심사를 분리할 수 있는데 그 만큼 보일러 플레이트(쓸데 없는 작업)가 증가시키기 때문에 도메인은 선택사항

2.1 UI Layer

- 사용자와 상호작용하는 화면으로 UI elements와 State holders로 구성되어 있는데 UI elemtens는 Activity, Fragment, composeScreen으로 구현하고 State holders는 받은 데이터를 UI에 노출하기 위해 로직을 처리하는 부분으로 ViewModel로 구현
- UI Layer 구조로는 adapter, compose, ui.theme, view, viewmodel, di, utils 가 있음

2.2 Data Layer

- 앱에서 처리하는 유형의 데이터별로 저장소 클래스가 있는 계층
- 데이터소스에 접근할 수 있는 진입점음 레포지토리 밖에 없음