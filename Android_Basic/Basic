1. 액티비티와 프래그먼트의 차이

- 액티비티 : 앱의 주요 화면을 나타냄, 앱 내에서 독립적인 화면을 나타내고 각각이 독립적인 라이프사이클을 가지며 실행이 됨, 여러 액티비티를 스택 형태로 관리하고, 다른 액티비티를 시작하거나 닫을 수 있음

- 프래그먼트 : 액티비티 내에서 재사용이 가능한 UI 조각, 액티비티 내에서 여러 번 사용될 수 있으며 여러 프래그먼트를 조합하여 화면을 구성할 수 있음 이로써 UI를 모듈화하고 재사용성을 높일 수 있음

2. 명시적 인텐트와 암시적 인텐트

- 명시적 인텐트 : 목적지 컴포넌트를 정확하게 지정한 경우에 사용, 주로 앱 내부에서 다른 화면으로 이동하거나 서비스를 시작하거나 내부 브로드캐스트를 전달할 때 사용

- 암시적 인텐트 : 대상 컴포넌트를 명확히 지정하지 않고 안드로이드 시스템에게 작업을 수행할 수 있는 적절한 앱 컴포넌트를 찾아달라고 요청, 주로 외부 앱과 상호작용할 때 사용(ex 웹 페이지 열거나, 사진,연락처 등)

3. AsyncTask와 Deprecated 이유

- 안드로이드 앱에서 비동기적으로 백그라운드 스레드에서 작업을 수행하고 그 결과를 UI 스레드로 반환하는 데 사용되는 클래스

- 메모리 누수와 수명주기 관리의 어려움 : 액티비티가 destory 되어도 해당 AsyncTask 가 완료되지 않은 경우 메모리 누수 유발

- 제한된 병렬성 : 내부적으로 하나의 백그라운드 스레드에서 작업을 수행하므로 여러 작업을 병렬로 실행하기 어려움

- 콜백 지옥과 가독성 문제 : 콜백 함수를 사용하여 비동기 작업을 처리하는 데 이로 인해 콜백 지옥과 같은 문제가 발생할 수 있으며 코드의 가독성을 저해할 수 있음

4. 프로세스와 스레드

- 프로세스 : 독립적인 실행 단위, 운영 체제로 부터 할당된 메모리 공간을 갖고 있으며 앱의 실행에 필요한 리소스(코드, 데이터, 스택, 힙 등)을 포함, 각 프로세스는 독립적으로 실행되며, 다른 프로세스와 격리되어 있음 이는 한 앱이 다른 앱의 데이터나 메모리에 직접 접근할 수 없음을 의미

- 스레드 : 프로세스 내에서 실행되는 실행 단위, 프로세스의 일부로 간주되며 해당 프로세스 내의 메모리 및 자원을 공유 따라서 스레드 간에 데이터 및 자원을 공유하고 통신할 수 있음

5. REST API 와 SOAP 차이

- REST API : HTTP 프로토콜을 기반으로 동작(GET, POST, PUT, DELETE), JSON 또는 XML과 같은 경량 데이터 형식을 사용

- SOAP : 별도의 프로토콜에 무고나하게 동작, 주로 XML 사용, HTTP, SMTP, TCP 등 다양한 프로토콜 위에서 작동 가능

6. 디자인 패턴 사용 이유

- 유지보수 용이성
- 코드 재사용성
- 확장성
- 코드 품질 향상
- 커뮤니케이션 향상

7. 의존성 주입

- 앱 구성 요소 간의 의존 성을 느슨하게 결합하고 테스트 용이성을 향상 시키며, 코드 재사용성을 높이기 위한 디자인 패턴

- Dagger 2 혹은 Hilt, ButterKnife 사용